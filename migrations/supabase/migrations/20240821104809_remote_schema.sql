drop function if exists "public"."match_rag_docs"(query_embedding vector, filter jsonb, repo_name text);

create table "public"."git_issue_tasks" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "repo_name" character varying,
    "status" character varying,
    "node_type" character varying,
    "from_task_id" character varying,
    "issue_id" character varying,
    "bot_id" character varying
);


create table "public"."github_repo_config" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "repo_name" character varying default '255'::character varying,
    "robot_id" character varying default '255'::character varying
);


alter table "public"."github_repo_config" enable row level security;

create table "public"."rag_issues" (
    "id" uuid not null default gen_random_uuid(),
    "update_timestamp" timestamp with time zone not null default now(),
    "content" text,
    "metadata" jsonb,
    "embedding" vector,
    "repo_name" character varying,
    "issue_id" character varying,
    "bot_id" character varying,
    "comment_id" character varying
);


alter table "public"."bots" add column "llm" character varying default 'openai'::character varying;

alter table "public"."rag_docs" add column "update_timestamp" timestamp with time zone;

alter table "public"."rag_docs" alter column "repo_name" set data type text using "repo_name"::text;

CREATE UNIQUE INDEX git_issue_tasks_pkey ON public.git_issue_tasks USING btree (id);

CREATE UNIQUE INDEX github_repo_config_pkey ON public.github_repo_config USING btree (id);

CREATE UNIQUE INDEX issue_docs_pkey ON public.rag_issues USING btree (id);

alter table "public"."git_issue_tasks" add constraint "git_issue_tasks_pkey" PRIMARY KEY using index "git_issue_tasks_pkey";

alter table "public"."github_repo_config" add constraint "github_repo_config_pkey" PRIMARY KEY using index "github_repo_config_pkey";

alter table "public"."rag_issues" add constraint "issue_docs_pkey" PRIMARY KEY using index "issue_docs_pkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.match_rag_docs(query_embedding vector, filter jsonb DEFAULT '{}'::jsonb)
 RETURNS TABLE(id uuid, content text, metadata jsonb, embedding vector, similarity double precision)
 LANGUAGE plpgsql
AS $function$
#variable_conflict use_column
begin
  return query
  select
    id,
    content,
    metadata,
    embedding,
    1 - (rag_docs.embedding <=> query_embedding
  ) as similarity
  from rag_docs
  where metadata @> jsonb_extract_path(filter, 'metadata')
  and bot_id = jsonb_extract_path_text(filter, 'bot_id')
  order by rag_docs.embedding <=> query_embedding;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.rag_docs(query_embedding vector, filter jsonb DEFAULT '{}'::jsonb, query_repo_name text DEFAULT ''::text)
 RETURNS TABLE(id uuid, metadata jsonb, content text, similarity double precision)
 LANGUAGE sql
 STABLE
AS $function$
  select
    rag_docs.id,
    rag_docs.metadata,
    rag_docs.content,
    1 - (rag_docs.embedding <=> query_embedding) as similarity
  from rag_docs
  where metadata @> filter
  and repo_name = query_repo_name
  order by (rag_docs.embedding <=> query_embedding) asc
$function$
;

CREATE OR REPLACE FUNCTION public.update_timestamp_function()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
  NEW.update_timestamp = now();
  RETURN NEW;
END;
$function$
;

grant delete on table "public"."git_issue_tasks" to "anon";

grant insert on table "public"."git_issue_tasks" to "anon";

grant references on table "public"."git_issue_tasks" to "anon";

grant select on table "public"."git_issue_tasks" to "anon";

grant trigger on table "public"."git_issue_tasks" to "anon";

grant truncate on table "public"."git_issue_tasks" to "anon";

grant update on table "public"."git_issue_tasks" to "anon";

grant delete on table "public"."git_issue_tasks" to "authenticated";

grant insert on table "public"."git_issue_tasks" to "authenticated";

grant references on table "public"."git_issue_tasks" to "authenticated";

grant select on table "public"."git_issue_tasks" to "authenticated";

grant trigger on table "public"."git_issue_tasks" to "authenticated";

grant truncate on table "public"."git_issue_tasks" to "authenticated";

grant update on table "public"."git_issue_tasks" to "authenticated";

grant delete on table "public"."git_issue_tasks" to "service_role";

grant insert on table "public"."git_issue_tasks" to "service_role";

grant references on table "public"."git_issue_tasks" to "service_role";

grant select on table "public"."git_issue_tasks" to "service_role";

grant trigger on table "public"."git_issue_tasks" to "service_role";

grant truncate on table "public"."git_issue_tasks" to "service_role";

grant update on table "public"."git_issue_tasks" to "service_role";

grant delete on table "public"."github_repo_config" to "anon";

grant insert on table "public"."github_repo_config" to "anon";

grant references on table "public"."github_repo_config" to "anon";

grant select on table "public"."github_repo_config" to "anon";

grant trigger on table "public"."github_repo_config" to "anon";

grant truncate on table "public"."github_repo_config" to "anon";

grant update on table "public"."github_repo_config" to "anon";

grant delete on table "public"."github_repo_config" to "authenticated";

grant insert on table "public"."github_repo_config" to "authenticated";

grant references on table "public"."github_repo_config" to "authenticated";

grant select on table "public"."github_repo_config" to "authenticated";

grant trigger on table "public"."github_repo_config" to "authenticated";

grant truncate on table "public"."github_repo_config" to "authenticated";

grant update on table "public"."github_repo_config" to "authenticated";

grant delete on table "public"."github_repo_config" to "service_role";

grant insert on table "public"."github_repo_config" to "service_role";

grant references on table "public"."github_repo_config" to "service_role";

grant select on table "public"."github_repo_config" to "service_role";

grant trigger on table "public"."github_repo_config" to "service_role";

grant truncate on table "public"."github_repo_config" to "service_role";

grant update on table "public"."github_repo_config" to "service_role";

grant delete on table "public"."rag_issues" to "anon";

grant insert on table "public"."rag_issues" to "anon";

grant references on table "public"."rag_issues" to "anon";

grant select on table "public"."rag_issues" to "anon";

grant trigger on table "public"."rag_issues" to "anon";

grant truncate on table "public"."rag_issues" to "anon";

grant update on table "public"."rag_issues" to "anon";

grant delete on table "public"."rag_issues" to "authenticated";

grant insert on table "public"."rag_issues" to "authenticated";

grant references on table "public"."rag_issues" to "authenticated";

grant select on table "public"."rag_issues" to "authenticated";

grant trigger on table "public"."rag_issues" to "authenticated";

grant truncate on table "public"."rag_issues" to "authenticated";

grant update on table "public"."rag_issues" to "authenticated";

grant delete on table "public"."rag_issues" to "service_role";

grant insert on table "public"."rag_issues" to "service_role";

grant references on table "public"."rag_issues" to "service_role";

grant select on table "public"."rag_issues" to "service_role";

grant trigger on table "public"."rag_issues" to "service_role";

grant truncate on table "public"."rag_issues" to "service_role";

grant update on table "public"."rag_issues" to "service_role";

CREATE TRIGGER update_timestamp_trigger BEFORE INSERT OR UPDATE ON public.rag_docs FOR EACH ROW EXECUTE FUNCTION update_timestamp_function();


